name: Aws Deploy Pipeline

on:
  push:
    branches:
      - main

jobs:
  build-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. 서브모듈 접근을 위한 SSH 에이전트 시작 및 SSH_KEY_CONFIG 추가
      - name: Start SSH agent for submodules
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_KEY_CONFIG }}

      # 2. 코드 및 서브모듈 체크아웃
      - name: Check out code with submodules
        uses: actions/checkout@v2
        with:
          submodules: true  # 서브모듈 포함

      # 3. Java 설정
      - name: Set up Java
        uses: actions/setup-java@v2
        with:
          java-version: '17'

      # 4. 프로젝트 빌드
      - name: Build with Gradle
        run: ./gradlew clean build

      # 5. EC2 서버로 배포
      - name: Deploy to EC2
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
          SSH_KEY: ${{ secrets.SSH_KEY }}

        run: |
          # SSH 키 설정
          echo "$SSH_KEY" > ssh_key.pem
          chmod 600 ssh_key.pem
          
          # EC2 서버에 JAR 파일 업로드
          scp -i ssh_key.pem -o StrictHostKeyChecking=no build/libs/*.jar $EC2_USER@$EC2_HOST:/home/$EC2_USER/app.jar
          
          # EC2 서버에 SSH로 접속하여 애플리케이션 재시작
          ssh -i ssh_key.pem -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST << 'EOF'
            # 기존 프로세스 종료 및 새로 실행
            pkill -f 'java -jar' || true
            nohup java -jar /home/$EC2_USER/app.jar > /home/$EC2_USER/app.log 2>&1 &
          EOF
          
          # SSH 키 삭제
          rm ssh_key.pem
