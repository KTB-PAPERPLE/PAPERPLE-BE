name: Aws Deploy Pipeline

on:
  push:
    branches:
      - main

jobs:
  build-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. 코드 및 서브모듈 체크아웃
      - name: Check out code with submodules
        uses: actions/checkout@v3
        with:
          submodules: recursive  # 모든 서브모듈 포함하여 가져오기
          fetch-depth: 0         # 전체 히스토리 가져오기
          token: ${{ secrets.GH_TOKEN }}

      # 2. Java 설정
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      # 3. EC2 서버로 배포
      - name: Deploy to EC2
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
          SSH_KEY: ${{ secrets.SSH_KEY }}
          APP_PATH: /home/${{ secrets.EC2_USER }}/PAPERPLE-BE
          JAR_PATH: /home/${{ secrets.EC2_USER }}/PAPERPLE-BE/build/libs/PAPERPLE-BE-0.0.1-SNAPSHOT.jar

        run: |
          # SSH 키 설정
          echo "$SSH_KEY" > ssh_key.pem
          chmod 600 ssh_key.pem
          
          # EC2 서버에 SSH로 접속하여 애플리케이션 업데이트 및 빌드
          ssh -i ssh_key.pem -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST << 'EOF'
            # 작업 디렉토리로 이동
            mkdir -p $APP_PATH
            cd $APP_PATH
          
            # 저장소가 없다면 클론, 있다면 pull
            if [ ! -d ".git" ]; then
              git clone ${{ github.server_url }}/${{ github.repository }}.git .
            else
              git pull origin main
            fi
          
            # gradlew 권한 부여
            chmod +x gradlew
          
            # 프로젝트 빌드
            ./gradlew clean build
          
            # 기존 프로세스 종료
            pkill -f 'PAPERPLE-BE-0.0.1-SNAPSHOT.jar' || true
          
            # 새 jar 실행
            nohup java -jar $JAR_PATH > $APP_PATH/app.log 2>&1 &
          EOF
          
          # SSH 키 삭제
          rm ssh_key.pem