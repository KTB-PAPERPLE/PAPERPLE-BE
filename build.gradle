buildscript {
    ext {
        restdocsApiSpecVersion = '0.18.2'
    }
}

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.2'
    id 'io.spring.dependency-management' version '1.1.6'
    // id 'org.asciidoctor.jvm.convert' version '3.3.2'
    id 'com.epages.restdocs-api-spec' version "${restdocsApiSpecVersion}"
    id 'org.hidetake.swagger.generator' version '2.18.2'
    id 'com.diffplug.spotless' version '6.19.0'
}

group = 'com.ktb'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenCentral()
}

openapi3 {
    servers = [
            { url = "http://localhost:8080" }
    ]
    title = "API 문서"
    description = "RestDocs With Swagger"
    version = "0.0.1"
    format = "yaml"
    outputFileNamePrefix = "openapi3"
    outputDirectory = "build/api-spec"
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'io.jsonwebtoken:jjwt-api:0.12.5'
    implementation 'software.amazon.awssdk:s3:2.20.40'

    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.5'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'com.mysql:mysql-connector-j'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    //querydsl
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    // restdocs
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testImplementation "com.epages:restdocs-api-spec-restassured:${restdocsApiSpecVersion}"
    testImplementation 'io.rest-assured:rest-assured'

    // redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    testImplementation 'org.springframework.security:spring-security-test'

    // openapi3
    testImplementation 'com.epages:restdocs-api-spec-mockmvc:' + restdocsApiSpecVersion

    // swaggerUI
    swaggerUI 'org.webjars:swagger-ui:4.11.1'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'
}

configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

tasks.processTestResources {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    from('src/test/resources') {
        include 'application-test.yml'
        include 'initial_data.yml'
    }
}

tasks.processResources {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

sourceSets {
    test {
        resources {
            srcDir 'src/test/resources'
        }
    }
}

test {
    useJUnitPlatform()
    systemProperty 'spring.profiles.active', 'test'
}

tasks.register('copySwaggerUI', Copy) {
    dependsOn 'openapi3'
    from("build/api-spec/")
    into("src/main/resources/static/docs/")
    doLast {
        def openApiFile = file("src/main/resources/static/docs/openapi3.yaml")

        def securitySchemesContent = """
  securitySchemes:
    APIKey:
      type: apiKey
      name: access_token
      in: cookie
security:
  - APIKey: []
"""
        openApiFile.append(securitySchemesContent)
    }
}

bootJar {
    dependsOn 'generateSwaggerUI'
    dependsOn 'copySwaggerUI'
}

bootRun {
    dependsOn 'generateSwaggerUI'
    dependsOn 'copySwaggerUI'
}

spotless {
    java {
        removeUnusedImports()
        cleanthat()
        googleJavaFormat()
        formatAnnotations()
    }
}